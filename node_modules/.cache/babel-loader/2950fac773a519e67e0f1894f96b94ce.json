{"ast":null,"code":"var _jsxFileName = \"/Users/ict/Documents/GitHub/mediasiya/src/app/common/modal/ModalManager.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ModalManager() {\n  _s();\n\n  const modalLookup = {};\n  const currenModal = useSelector(state => state.modals);\n  let renderedModal;\n\n  if (currenModal) {\n    const {\n      modalType,\n      modalProps\n    } = currenModal;\n    const ModalComponent = modalLookup[modalType];\n    renderedModal = /*#__PURE__*/_jsxDEV(ModalComponent, { ...modalProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 21\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: renderedModal\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ModalManager, \"QL4GumndU4cUXSJZn5KdOGUt6sU=\", false, function () {\n  return [useSelector];\n});\n\n_c = ModalManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalManager\");","map":{"version":3,"sources":["/Users/ict/Documents/GitHub/mediasiya/src/app/common/modal/ModalManager.jsx"],"names":["React","useSelector","ModalManager","modalLookup","currenModal","state","modals","renderedModal","modalType","modalProps","ModalComponent"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAMC,WAAW,GAAG,EAApB;AAKA,QAAMC,WAAW,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,MAAlB,CAA/B;AACA,MAAIC,aAAJ;;AACA,MAAIH,WAAJ,EAAiB;AACf,UAAM;AAAEI,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA4BL,WAAlC;AACA,UAAMM,cAAc,GAAGP,WAAW,CAACK,SAAD,CAAlC;AACAD,IAAAA,aAAa,gBAAG,QAAC,cAAD,OAAoBE;AAApB;AAAA;AAAA;AAAA;AAAA,YAAhB;AACD;;AAED,sBAAO;AAAA,cAAOF;AAAP;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAfuBL,Y;UAMFD,W;;;KANEC,Y","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport default function ModalManager() {\n  const modalLookup = {\n\n  };\n  \n\n  const currenModal = useSelector((state) => state.modals);\n  let renderedModal;\n  if (currenModal) {\n    const { modalType, modalProps } = currenModal;\n    const ModalComponent = modalLookup[modalType];\n    renderedModal = <ModalComponent {...modalProps} />;\n  }\n\n  return <span>{renderedModal}</span>;\n}\n"]},"metadata":{},"sourceType":"module"}